name: Build, Scan & Push Frontend to Artifact Registry 🚀

on:
  push:
    branches:
      - master
    paths:
      - 'application/frontend/**'
      - '.github/workflows/frontend-ci.yml'

env:
  REGISTRY: us-central1-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPOSITORY: frontend
  IMAGE_NAME: wobot-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-scan-push:
    name: 🎨 Build, Scan & Push Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔨 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker to use gcloud
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: 🏷️ Generate image tag
        id: image
        run: |
          echo "tag=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: 🏗️ Build and push multi-arch image
        uses: docker/build-push-action@v4
        with:
          context: ./application/frontend
          file: ./application/frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.image.outputs.tag }}

      - name: 🔍 Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: application/frontend/Dockerfile
          failure-threshold: warning

      - name: � Create scan-results directory
        run: mkdir -p scan-results

      - name: �🛡️ Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.tag }}
          format: 'json'
          output: 'scan-results/scan-report.json'
          scanners: 'vuln'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: 📊 Generate Trivy Report Summary
        if: always()
        run: |
          mkdir -p scan-results
          if [ -f scan-results/scan-report.json ]; then
            echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
            
            jq -r '.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[] | .Severity' scan-results/scan-report.json | sort | uniq -c | while read count severity; do
              echo "| $severity | $count |" >> $GITHUB_STEP_SUMMARY
            done
            
            echo -e "\n### 📝 Scan Details" >> $GITHUB_STEP_SUMMARY
            echo "Image: ${{ steps.image.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Security Scan Passed" >> $GITHUB_STEP_SUMMARY
            echo "No vulnerabilities detected or scan was skipped." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📦 Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-frontend-${{ github.sha }}
          path: scan-results/
          retention-days: 30